class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    // Method to insert a node at the beginning of the list
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Method to insert a node at the end of the list
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Method to insert a node at the given location in the sorted list
    public void insertAtLocation(int data) {
        Node newNode = new Node(data);
        if (head == null || head.data >= data) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null && current.next.data < data) {
            current = current.next;
        }
        newNode.next = current.next;
        current.next = newNode;
    }

    // Method to delete the first node
    public void deleteFirstNode() {
        if (head != null) {
            head = head.next;
        }
    }

    // Method to delete the last node
    public void deleteLastNode() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }
        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }
        current.next = null;
    }

    // Method to delete the node at the given index in the sorted list
    public void deleteAtIndex(int index) {
        if (index == 0) {
            deleteFirstNode();
            return;
        }
        Node current = head;
        for (int i = 0; current != null && i < index - 1; i++) {
            current = current.next;
        }
        if (current == null || current.next == null) {
            return;
        }
        current.next = current.next.next;
    }

    // Method to split the list into two sublists
    public void frontBackSplit() {
        if (head == null || head.next == null) {
            return;
        }
        Node slow = head;
        Node fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        Node front = head;
        Node back = slow.next;
        slow.next = null;
        System.out.println("Front half:");
        printList(front);
        System.out.println("Back half:");
        printList(back);
    }

    // Method to merge two sorted lists
    public static LinkedList mergeSortedLists(LinkedList list1, LinkedList list2) {
        LinkedList mergedList = new LinkedList();
        Node current1 = list1.head;
        Node current2 = list2.head;
        while (current1 != null && current2 != null) {
            if (current1.data < current2.data) {
                mergedList.insertAtEnd(current1.data);
                current1 = current1.next;
            } else {
                mergedList.insertAtEnd(current2.data);
                current2 = current2.next;
            }
        }
        while (current1 != null) {
            mergedList.insertAtEnd(current1.data);
            current1 = current1.next;
        }
        while (current2 != null) {
            mergedList.insertAtEnd(current2.data);
            current2 = current2.next;
        }
        return mergedList;
    }

    // Method to print the linked list
    public static void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insertAtEnd(2);
        list.insertAtEnd(3);
        list.insertAtEnd(5);
        list.insertAtEnd(7);
        list.insertAtEnd(11);

        System.out.println("Original list:");
        LinkedList.printList(list.head);

        // Insertion
        list.insertAtBeginning(1);
        list.insertAtEnd(13);
        list.insertAtLocation(6);

        System.out.println("List after insertion:");
        LinkedList.printList(list.head);

        // Deletion
        list.deleteFirstNode();
        list.deleteLastNode();
        list.deleteAtIndex(2);

        System.out.println("List after deletion:");
        LinkedList.printList(list.head);

        // Split into two sublists
        System.out.println("Splitting the list into two halves:");
        list.frontBackSplit();

        // Merge two sorted lists
        LinkedList list1 = new LinkedList();
        list1.insertAtEnd(1);
        list1.insertAtEnd(4);
        list1.insertAtEnd(6);

        LinkedList list2 = new LinkedList();
        list2.insertAtEnd(2);
        list2.insertAtEnd(3);
        list2.insertAtEnd(5);

        LinkedList mergedList = LinkedList.mergeSortedLists(list1, list2);
        System.out.println("Merged sorted list:");
        LinkedList.printList(mergedList.head);
    }
}
